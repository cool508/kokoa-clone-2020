/*
  MDN 참조
  https://developer.mozilla.org/ko/docs/Web
  transition 참조

  animation 참조
  https://animista.net
*/
/* display */
.display {
  display: inline-block; /* 블록을 인라인 요소로 바꿈 하지만 잘 사용 X */
  display: flex; /* 부모태그에게 명시 */
  margin: 20px;
  justify-content: space-between; /* 주(가로)축 */
  align-items: center; /* 교차(세로)축 */
  flex-direction: column; /* 주축과 교차축을 서로 바꿈 */
  /* flex-wrap: wrap; 겹치는 현상에 대해 다룸? */
}

/* position */
.position {
  position: relative;
  /* 처음 생성한 영역기준 top,left, right, bottom 사용 가능 */
  position: absolute;
  /* relative한 부모를 기준으로 top,left, right, bottom 기준 */
  position: fixed;
  /* 스크롤을 내려도 고정 */
  position: static;
  /* 기본값 */
}

/* Pseudo Selector */
:first-child {
  /* 첫번째 자식 */
}
:last-child {
  /* 마지막자식 */
}
:nth-child(even/odd/n/3n + 1) {
  /* 짝수/홀수/n/3n+1 번째 자식*/
}
::placeholder {
  /* placeholder의 value만 설정 */
}
::selection {
  /* 드래그 시 설정 */
}
::first-letter {
  /* 첫글자 설정 */
}
::first-line {
  /* 첫줄 설정 */
}
/* Attribute */
input:required {
  /* Tag:Attribute 형식 = 태그의 속성*/
}
input[placeholder="username"] {
  /*  Tag[Attribute="value"]  형식 = 태그의 속성값*/
}
input[placeholder~="name"] {
  /*  Tag[Attribute~="value"]  형식 = 속성값에 value를 포함한 모든 경우*/
  /*  Tag[Attribute^="value"]  형식 = 속성값에 value가 처음에오는 경우*/
  /*  Tag[Attribute$="value"]  형식 = 속성값에 value를 끝에 오는 경우*/
}

/* combinator */
A B {
  /* A안에 있는 B 태그 */
}
A > B {
  /* A태그 바로 밑에 있는 B태그 */
}
A + B {
  /* A태그와 바로 옆에있는 형제인 B태그 */
}
A ~ B {
  /* A태그와 형제인 B태그 */
}

/* state */
:hover {
  /* 마우스 커서가 위로 올라가 있을 때 */
}
:active {
  /* 마우스가 어떤걸 클릭하고 있을 때 */
}
:focus {
  /* 어떤 엘리먼트가 포커스 되어있을 때 */
}
:visited {
  /* 클릭 했거나 방문한 적이 있는 링크에 적용 */
}
:focus-within {
  /* focus상태인 자식을 가진 부모에게 적용 */
}

/* Color */
.hexadecimal_color {
  /* 16진수 */
  color: #ffffff;
}
.RGBa_color {
  /* RGB */
  color: rgb(252, 60, 0);
  /*  RGBA-> 투명도 */
  background-color: rgba(252, 60, 0, 0.5);
}

/* :root */
:root {
  --main-color: #fcce00;
  /* --변수명 : 값 (공백은 - 로 채워주기)*/
}
A {
  color: var(--main-color);
  /* 변수 사용 var(변수명) */
  /* 변수에 컬러값 대입하여 사용하기 */
}

/* Transition : 어떤 상태에서 다른 상태로 변화를 애니메이션으로 만드는 방법*/
A {
  color: wheat;
  background-color: tomato;
  transition: all 1s ease-in-out;
  /* transition: 적용부분 시간 ease-in-out; */
  /* state가 없는 부분에 사용해야한다. */
  /* ease-in function : 어떻게 변화 할것인지 알려줌  EX) 빨라지다가 천천히...*/
}
A:hover {
  color: tomato;
  background-color: wheat;
}

/* Transformations */
A {
  transform: rotateZ(360deg) scale(0.5);
  /* transform function은 MDN에서 확인  */
  /* transition과 연결 사용가능  */
}

/* Animation */
@keyframes name1 {
  from {
    /* 여기서 부터 */
  }
  to {
    /* 여기까지 애니메이션지정*/
  }
}
@keyframes name2 {
  /* 단계를 나눌수도 있음 -> 조금더 자연스러운 연출 가능 */
  0% {
  }
  50% {
  }
  100% {
  }
}
A {
  animation: name 5s ease-in-out infinite;
  /* 사용 + infinite 무한재생*/
}

/* Media Querry : CSS만을 이용하여 스크린의 사이즈를 알 수 있는 방법 */
@media screen and (조건1) and (조건2) ... {
  A {
    /* 적용할 CSS */
    /* 조건 : min/max-width/height */
    /* min/max-device-width/height는 모바일 에서만 사용가능 */
    /* orientation: landscape(가로모드)/portrait(세로모드) */
  }
}
@media print {
  /* 홈페이지 프린트 할때 CSS 적용 */
}
